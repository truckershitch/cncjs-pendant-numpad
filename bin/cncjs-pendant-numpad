#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
var hid = require("node-hid");
var options = {};

const { gcode_bbox } = require("../gcode_bbox");

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncjs/cncrc.cfg file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: localhost)",
        "localhost"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    )
    .option(
        "--probeoffset <offset>",
        "offset (thickness) for Z probe",
        '1.56'
    )
    .option(
        "--vendorid <vendor>",
        "Vendor ID of USB HID device"
    )
    .option(
        "--productid <product>",
        "Product ID of USB HID device"
    );

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
    vendorid: program.vendorid,
    productid: program.productid,
    probeoffset: program.probeoffset
};

if (options.list) {
    serialport.list().then((ports) => {
        ports.forEach(function(port) {
            console.log(port.path);
        });
    }).catch((err) =>{
        if (err) {
            console.error(err);
            process.exit(1);
        }
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    },
    numlock_at: new Date(),
    spindle_speed: 0,
    gcode: null,
    gcode_name: null,
    context: null,
    last_key_at: new Date(),
    last_key: null,
    key_repeats: 0,
    bbox: {
        xmin: 0,
        xmax: 0,
        ymin: 0,
        ymax: 0
    }


};

var kbdevent = {
    numlock: 0,
    l_control: 0,
    l_shift: 0,
    l_alt: 0,
    l_meta: 0,
    r_control: 0,
    r_shift: 0,
    r_alt: 0,
    r_meta: 0,
    key: 0, // Normal keys
    extra: 0, // Advanced Keys or Special Keys
    repeating: 0, // If it is repating a movement
    move: 1, // Actually move size
    default_move: 1 // Alter by F1, F2, F3
};

var createServer = function(options) {
    serverMain(options, function(err, socket) {
console.log("AT SERVERMAiN");
        socket.on("Grbl:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Grbl:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on("Smoothie:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function(state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function(data) {
            console.log("sender:status",data);
            store.sender.status = data;
        });

        socket.on('serialport:write', function (data, context) {
            store.context = context;
        });

        socket.on('serialport:read', function(data) {
            const d = (data || '').trim();
            const re = /[<|]FS:(\d+),(\d+)[>|]/;
            const m = d.match(re);
            console.log("serialport:read",d);
            if (m) {
                store.spindle_speed = parseInt(m[2]) || 0;
            }
        });

        socket.on('gcode:load', (file, gc) => {
            store.gcode_filename = file;
            store.gcode = gc;
            store.bbox = gcode_bbox(gc);
            console.log('gcode loaded, bbox ',store.bbox);
        });

        socket.on('gcode:unload', () => {
            store.gcode_filename = '';
            store.gcode = '';
            console.log('gcode unloaded')
        });

        const findPath = interface =>
            hid
                .devices()
                .find(
                    item =>
                        item.vendorId === options.vendorId &&
                        item.productId === options.productId &&
                        item.interface === interface
                ).path;

        console.log("Keyboard HID Address:", findPath(0));

        var keyboard_main = new hid.HID(findPath(0));

        keyboard_main.on("data", function(data) {
            var recv = data.toJSON().data;
            var bits = recv.shift();
            kbdevent.numlock = (new Date() - store.numlock_at)<250;
            kbdevent.l_control = (bits & 1) !== 0;
            kbdevent.l_shift = (bits & 2) !== 0;
            kbdevent.l_alt = (bits & 4) !== 0;
            kbdevent.l_meta = (bits & 8) !== 0;
            kbdevent.r_control = (bits & 16) !== 0;
            kbdevent.r_shift = (bits & 32) !== 0;
            kbdevent.r_alt = (bits & 64) !== 0;
            kbdevent.r_meta = (bits & 128) !== 0;
            recv.shift();
            kbdevent.key = 0;
            for(var i=0;i<recv.length;i++) {
                if (recv[i]!=0) {
                    kbdevent.key = recv.shift();
                }
            }
            if (kbdevent.key!=0) {
                if ((store.last_key==kbdevent.key)&&((new Date()) - store.last_key_at<1000)) store.key_repeats++;
                else store.key_repeats = 0;
                store.last_key_at = new Date();
                store.last_key = kbdevent.key;
                sendToController();
            }
        });


        function run_macro(macro_id) {
            // run:macro args: id, context = {}, callback = noop
            console.log("run macro: "+macro_id)
            // socket.emit('command', options.port, 'macro:run', macro_id, store.context);
        };

        function bbox_loaded() {
          var r = false;
          const bb = store.bbox;
          if ((bb.xmax-bb.xmin)>0) r = true;
          return r;
        };

        function traipse_around_the_edges() {
            if (bbox_loaded()) {
                const bb = store.bbox;
                var gcode = [];
                gcode.push("G90");
                gcode.push("G0 Z10"); // z-safe
                gcode.push("G0 X"+bb.xmin+" Y"+bb.ymin);
                gcode.push("G0 X"+bb.xmax);
                gcode.push("G0 Y"+bb.ymax);
                gcode.push("G0 X"+bb.xmin);
                gcode.push("G0 X"+bb.xmin+" Y"+bb.ymin);
            } else {
                console.log("No bounding box (gcode) loaded.");
            }
        }

        function toggle_spindle() {
            // toggle spindle!
            if (store.spindle_speed==0) {
                console.log("Starting spindle");
                socket.emit("write",options.port,"M3 S20000;\n");
            } else {
                console.log("Stopping spindle");
                socket.emit("write",options.port,"M5;\n");
            }
            // console.log("Querying.");
            var r = socket.emit("write",options.port,"?");

        }

        function sendToController() {
            // Calculate move size modifiers
            kbdevent.move = kbdevent.default_move;

            const numlock = kbdevent.numlock;
            console.log("!!!!! key:"+kbdevent.key+" numlock:"+numlock);

            switch (kbdevent.key) {
                case 83:  // [1] numlock, only hits in pairs tho, not individual
                    store.numlock_at = new Date();
                    break;

                case 84: // [2] key: /
                    if (!numlock) {
                        kbdevent.default_move = 0.1;
                    } else {
                        socket.emit('command', options.port, 'gcode:stop');
                    }
                    break;

                case 85: // [3] key: *
                    if (!numlock) {
                        kbdevent.default_move = 1;
                    } else {
                        socket.emit('command', options.port, 'gcode:pause');
                    }
                    break;

                case 42: // [4] key: Backspace
                    if (!numlock) {
                        kbdevent.default_move = 10;
                    } else {
                        socket.emit('command', options.port, 'gcode:start');
                    }
                    break;

                case 95: // [5] home
                    if (!numlock) {

                        socket.emit(
                            "write",
                            options.port,
                            "G91 X-" + kbdevent.move + " Y" + kbdevent.move + ";\n"
                        );
                    } else {
                    }
                    break;
                case 96: // [6] arrow: up
                    socket.emit(
                        "write",
                        options.port,
                        "G91 Y" + kbdevent.move + ";\n"
                    );
                    break;

                case 97: // [7] arrow: Page up
                    socket.emit(
                        "write",
                        options.port,
                        "G91 X" + kbdevent.move + " Y" + kbdevent.move + ";\n"
                    );
                    break;
                case 86: // [8] -
                    if (!numlock) {
                        socket.emit(
                            "write",
                            options.port,
                            "G91 Z" + kbdevent.move + ";\n"
                        );
                    } else {
                        toggle_spindle();
                    }
                    break;

                case 92: // [9] arrow: left
                    socket.emit(
                        "write",
                        options.port,
                        "G91 X-" + kbdevent.move + ";\n"
                    );
                    break;

                case 93: // [10] Key: 5
                    if (!numlock) {

                        socket.emit("write", options.port, "G90 X0 Y0;\n");
                    } else {
                        socket.emit("write", options.port, "G10 L20 P1 X0 Y0;\n");

                    }
                    break;

                case 94: // [11] arrow: right
                    socket.emit(
                        "write",
                        options.port,
                        "G91 X" + kbdevent.move + ";\n"
                    );
                    break;

                case 87: // [12] +
                    if (!numlock) {
                        socket.emit(
                            "write",
                            options.port,
                            "G91 Z-" + kbdevent.move + ";\n"
                        );
                    } else {

                        socket.emit("write", options.port, "G10 L20 P1 Z0;\n");
                    }
                    break;

                case 89: // [13] arrow: End
                    socket.emit('command', options.port, 'gcode:start');
                    socket.emit(
                        "write",
                        options.port,
                        "G91 X-" + kbdevent.move + " Y-" + kbdevent.move + ";\n"
                    );
                    break;

                case 90: // [14] arrow: down
                    socket.emit(
                        "write",
                        options.port,
                        "G91 Y-" + kbdevent.move + ";\n"
                    );
                    break;

                case 91: // [15] arrow: Page Down
                    if (!numlock) {
                        socket.emit('command', options.port, 'gcode:start');
                        socket.emit(
                            "write",
                            options.port,
                            "G91 X" + kbdevent.move + " Y-" + kbdevent.move + ";\n"
                        );
                    } else {
                        traipse_around_the_edges();
                    }
                    break;

                case 88: // [16/20] Key: OK or Enter
                    if (store.key_repeats>=4) {
                        socket.emit("shutdown");
                        console.log("********************");
                        console.log("** Shutting down! **");
                        console.log("********************");
                    }
                    socket.emit('command', options.port, 'reset');
                    break;

                case 98: // [17/18] key: 0/ins
                    socket.emit('command', options.port, 'unlock');
                    break;

                case 99: // [19] . z-probe
                    if (!numlock) {
                        socket.emit("write", options.port, "G91;\n");
                        socket.emit("write", options.port, "G38.2 Z-10 F87\n");
                        socket.emit("write", options.port, "G10 L20 P1 Z"+options.probeOffset+"\n");
                        socket.emit("write", options.port, "G91;\n");
                        socket.emit("write", options.port, "G0 Z4;\n");
                        socket.emit("write", options.port, "G90;\n");
                    } else {
                        run_macro("z-probe 10mm grid");
                    }
                    break;

            }

        }
    });
};

// console.log('List of connected devices (paths): ');
// console.log('devices:', hid.devices());

if (options.port) {
    createServer(options);
    return;
}

serialport.list().then((ports) => {
    const choices = ports.map(function(port) {
        return port.path;
    });

    inquirer
        .prompt([
            {
                type: "list",
                name: "port",
                message: "Specify which port you want to use?",
                choices: choices
            }
        ])
        .then(function(answers) {
            options.port = answers.port;

            createServer(options);
        });
}).catch((err) =>{
    if (err) {
        console.error(err);
        process.exit(1);
    }
});

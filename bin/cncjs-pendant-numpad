#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
var hid = require("node-hid");
const { exec } = require('child_process');

var options = {};

const { gcode_bbox } = require("../gcode_bbox");

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncjs/cncrc.cfg file")
    .option("-p, --port <port>", "path or name of serial port", "/dev/ttyACM0")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: 192.168.1.94)",
        "192.168.1.94"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    )
    // .option(
    //     "--probeoffset <offset>",
    //     "offset (thickness) for Z probe",
    //     '1.56'
    // )
    .option( // MechWild
        "--vendorid <vendor>",
        "Vendor ID of USB HID device",
        0x6d77
    )
    .option( // MurphPad
        "--productid <product>",
        "Product ID of USB HID device",
        0x1705
    );

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
    vendorid: program.vendorid,
    productid: program.productid
    // probeoffset: program.probeoffset
};

if (options.list) {
    serialport.list().then((ports) => {
        ports.forEach(function(port) {
            console.log(port.path);
        });
    }).catch((err) =>{
        if (err) {
            console.error(err);
            process.exit(1);
        }
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    },
    numlock_at: new Date(),
    gcode: null,
    gcode_name: null,
    context: null,
    last_key_at: new Date(),
    last_key: null,
    key_repeats: 0,
    bbox: {
        xmin: 0,
        xmax: 0,
        ymin: 0,
        ymax: 0
    },
};


var kbdevent = {
    numlock: 0,
    l_control: 0,
    l_shift: 0,
    l_alt: 0,
    l_meta: 0,
    r_control: 0,
    r_shift: 0,
    r_alt: 0,
    r_meta: 0,
    key: 0, // Normal keys
    extra: 0, // Advanced Keys or Special Keys
    repeating: 0, // If it is repating a movement
    move: 1, // Actually move size
    default_move: 1 // Alter by F1, F2, F3
};

var createServer = function(options) {
    serverMain(options, function(err, socket) {
        socket.on("Grbl:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Grbl:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on("Smoothie:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function(state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function(data) {
            console.log("sender:status",data);
            store.sender.status = data;
        });

        socket.on('serialport:write', function (data, context) {
            store.context = context;
        });

        socket.on('serialport:read', function(data) {
/*
            const d = (data || '').trim();
            console.log("serialport:read",d);
            var m = d.match(/[<|]FS:(\d+),(\d+)[>|]/);
            if (m) {
                store.spindle_speed = parseInt(m[2]) || 0;
                console.log("stored spindle speed: "+store.spindle_speed);
            }

            m = d.match(/MPos:([\-\d\.]+),([\-\d\.]+),([\-\d\.]+)/);
            if (m) {
                store.mposx = m[1];
                store.mposy = m[2];
                store.mposz = m[3];
            }

*/
        });

        socket.on('gcode:load', (file, gc) => {
            store.gcode_filename = file;
            store.gcode = gc;
            store.bbox = gcode_bbox(gc);
            console.log('gcode loaded, bbox ',store.bbox);
        });

        socket.on('gcode:unload', () => {
            store.gcode_filename = '';
            store.gcode = '';
            console.log('gcode unloaded')
        });

        const findPath = interface =>
            hid
                .devices()
                .find(
                    item =>
                        item.vendorId === options.vendorId &&
                        item.productId === options.productId &&
                        item.interface === interface
                ).path;

        console.log("Keyboard HID Address:", findPath(0));

        var keyboard_main = new hid.HID(findPath(0));

        keyboard_main.on("data", function(data) {
            var recv = data.toJSON().data;
            var bits = recv.shift();
            kbdevent.numlock = (new Date() - store.numlock_at)<250;
            kbdevent.l_control = (bits & 1) !== 0;
            kbdevent.l_shift = (bits & 2) !== 0;
            kbdevent.l_alt = (bits & 4) !== 0;
            kbdevent.l_meta = (bits & 8) !== 0;
            kbdevent.r_control = (bits & 16) !== 0;
            kbdevent.r_shift = (bits & 32) !== 0;
            kbdevent.r_alt = (bits & 64) !== 0;
            kbdevent.r_meta = (bits & 128) !== 0;
            recv.shift();
            kbdevent.key = 0;
            for(var i=0;i<recv.length;i++) {
                if (recv[i]!=0) {
                    kbdevent.key = recv.shift();
                }
            }
            if (kbdevent.key!=0) {
                if ((store.last_key==kbdevent.key)&&((new Date()) - store.last_key_at<1000)) store.key_repeats++;
                else store.key_repeats = 0;
                store.last_key_at = new Date();
                store.last_key = kbdevent.key;
                sendToController();
            }
        });

        function shutdown() {
            // night night

            exec('~/shutdown',
                 (error, stdout, stderr) => {
                     console.log(stdout);
                     console.log(stderr);
                     if (error !== null) {
                         console.log(`exec error: ${error}`);
                     }
                 }
                );
        };

        function active_state(t) {
            console.log("Checking activate.  It is",store.controller.state.status.activeState,"looking for",t);
            return store.controller.state.status.activeState==t;
        };

        function goto_safe_z() {
            send_gcode("G0 Z10"); // z-safe
        };

        function send_gcode(gc,eol=true) {
            if (eol) gc += ";\n";
            socket.emit("write", options.port, gc);
        };

        function send_cmd(cmd) {
            socket.emit('command', options.port, cmd);
        };

        // function run_macro(macro_id) {

        //     var context = { source: "feeder" } // to fool cncjs-kt-ext into running
        //     const bbox = store.bbox;
        //     const stat = store.controller.state.status;

        //     context.xmin = bbox.xmin;
        //     context.xmax = bbox.xmax;
        //     context.ymin = bbox.ymin;
        //     context.ymax = bbox.ymax;

        //     context.mposx = parseFloat(stat.mpos.x);
        //     context.mposy = parseFloat(stat.mpos.y);
        //     context.mposz = parseFloat(stat.mpos.z);

        //     context.posx = parseFloat(stat.wpos.x);
        //     context.posy = parseFloat(stat.wpos.y);
        //     context.posz = parseFloat(stat.wpos.z);

        //     console.log("running macro id",macro_id,"with context",context);


        //     // this is just enough context to kep cncjs-kt-ext happy

        //     // run:macro args: id, context = {}, callback = noop
        //     socket.emit('command', options.port, 'macro:run', macro_id, context);
        // };

        function bbox_loaded() {
          var r = false;
          const bb = store.bbox;
          if ((bb.xmax-bb.xmin)>0) r = true;
          return r;
        };

        function traipse_around_the_edges() {
            if (bbox_loaded()) {
                const bb = store.bbox;
                send_gcode("G90");
                goto_safe_z();
                send_gcode("G0 X"+bb.xmin+" Y"+bb.ymax);
                send_gcode("G0 X"+bb.xmax);
                send_gcode("G0 Y"+bb.ymin);
                send_gcode("G0 X"+bb.xmin);
                send_gcode("G0 X"+bb.xmin+" Y"+bb.ymax);
            } else {
                console.log("No bounding box (gcode) loaded.");
            }
        }

        // function toggle_spindle() {
        //     // toggle spindle!
        //     if (store.controller.state.status.spindle==0) {
        //         console.log("Starting spindle");
        //         send_gcode("M3 S20000");
        //     } else {
        //         console.log("Stopping spindle");
        //         send_gcode("M5");
        //     }
        //     console.log("Querying.");
        //     send_gcode("?",false);
        //     //socket.emit("write",options.port,"?");

        // }

        function jogSelect(move) {
            // cycle through coarse movements
            const jogs = [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 5, 10, 20, 50, 100, 200, 500]; // HID keycode 4 to 17

            // console.log("Rotary Encoder sent: ", move);
    	    let jog = jogs[move - 4]; // A = 0, N = 13
	        console.log("Jog set to ", jog);

            kbdevent.default_move = jog;
        }

        function sendToController() {
            // Calculate move size modifiers
            kbdevent.move = kbdevent.default_move;

            const numlock = kbdevent.numlock;
            console.log("!!!!! key:"+kbdevent.key+" numlock:"+numlock);

            switch (kbdevent.key) {

                // case 84: // [2] key: /
                //     if (!numlock) {
                //         kbdevent.default_move = 0.1;
                //     } else {
                //         send_cmd('gcode:stop');

                //         send_cmd('reset');
                //         setTimeout( function() {
                //             send_cmd('unlock');
                //             setTimeout( goto_safe_z, 500);
                //         }, 1500 );
                //     }
                //     break;
                // case 42: // [4] key: Backspace
                //     if (!numlock) {
                //         kbdevent.default_move = 10;
                //     } else {
                //         send_cmd('gcode:start');
                //     }
                //     break;
                // case 87: // [12] +
                //     if (!numlock) {
                //         send_gcode("G91 Z-" + kbdevent.move);
                //     } else {
                //         send_gcode("G10 L20 P1 Z0");
                //     }
                //     break;
                // case 99: // [19] . z-probe
                //     if (!numlock) {
                //         send_gcode("G91");
                //         send_gcode("G38.2 Z-10 F87");
                //         send_gcode("G10 L20 P1 Z"+options.probeOffset);
                //         send_gcode("G91");
                //         send_gcode("G0 Z4");
                //         send_gcode("G90");
                //     } else {
                //         console.log("attempting to run the z-probe grid macro");
                //         run_macro("3a31356e-844c-4aab-bcca-ef28321f77c2");
                //     }
                //     break;

                // rotary encoder has turned on MurphPad
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                    jogSelect(kbdevent.key);

                case 83:  // [1] numlock, only hits in pairs tho, not individual
                    store.numlock_at = new Date();
                    break;
                case 85: // "KC_PAUSE"
                    // if (!numlock) {
                    //     kbdevent.default_move = 1;
                    // } else {
                    //     if (active_state('Run')) {
                    //         send_cmd('gcode:pause');
                    //     }
                    //     if (active_state('Hold')) {
                    //         send_cmd('gcode:resume');
                    //     }
                    // }
                    if (active_state('Run')) {
                        send_cmd('gcode:pause');
                    }
                    if (active_state('Hold')) {
                        send_cmd('gcode:resume');
                    }
                    break;
                case 95: // Z+ "KP_7" "B/W Arrow up"
                    send_gcode("G91 Z" + kbdevent.move);
                    break;
                case 92: // Z- "KP_4" "B/W Arrow down"
                    send_gcode("G91 Z-" + kbdevent.move);
                    break;
                case 74: // Home Machine / "KC_HOME"
                    send_gcode("$H");
                    break;
                case 91: // X+ arrow right "KP_3"
                    send_gcode("G91 X" + kbdevent.move);
                    break;
                case 89: // X- arrow left "KP_1"
                    send_gcode("G91 X-" + kbdevent.move);
                    break;
                case 93: // Y+ arrow up "KP_5"
                    send_gcode("G91 Y" + kbdevent.move);
                    break;
                case 90: // Y- arrow down "KP_2"
                    send_gcode("G91 Y-" + kbdevent.move);
                    break;
                case 85: // Unlock "KC_U" "KP_PAST"
                    send_cmd('unlock');
                    break;
                case 97: // Trace edges of gcode "KP_9" "G"
                    traipse_around_the_edges();
                    break;
                case 94: // Move to X0Y0 / Set X0Y0 "KC_6" "Z"
                    if (!numlock) {
                        send_gcode("G90 X0 Y0");
                        break;
                    } else {
                        send_gcode("G10 L20 P1 X0 Y0"); // set X0 and Y0 to present location
                    }
                    break;
                case 42: // Reset / Shutdown "KC_BSPC" "PANIC"
                    if (store.key_repeats>=4) {
                        console.log("********************");
                        console.log("** Shutting down! **");
                        console.log("********************");
                        shutdown();
                    }
                    send_cmd('reset');
                    break;
                case 58: // Move 1 "KC_F1"
                    kbdevent.default_move = 1;
                    break;
                case 59: // Move 5 "KC_F2"
                    kbdevent.default_move = 5;
                    break;
                case 60: // Move 20 "KC_F3"
                    kbdevent.default_move = 20;
                    break;
                case 61: // Move 100 "KC_F4"
                    kbdevent.default_move = 100;
                    break;
                case 69: // "KC_F12" : Bitzero Macro (Murphpad FN key + KP_ENTER)
                    console.log("attempting to run the BitZero macro");
                    // run:macro args: id, context = {}, callback = noop
                    socket.emit('command', options.port, 'macro:run', '0c613845-cffa-46d5-b269-4c45fc016c6b', {});
                    break;
                case 88: // KP_Enter
                    if (!numlock) {
                        // kbdevent.default_move = 10;
                    } else {
                        send_cmd('gcode:start');
                    }
                    break;
            }

        }
    });
};

// console.log('List of connected devices (paths): ');
// console.log('devices:', hid.devices());

if (options.port) {
    createServer(options);
    return;
}

serialport.list().then((ports) => {
    const choices = ports.map(function(port) {
        return port.path;
    });

    inquirer
        .prompt([
            {
                type: "list",
                name: "port",
                message: "Specify which port you want to use?",
                choices: choices
            }
        ])
        .then(function(answers) {
            options.port = answers.port;

            createServer(options);
        });
}).catch((err) =>{
    if (err) {
        console.error(err);
        process.exit(1);
    }
});
